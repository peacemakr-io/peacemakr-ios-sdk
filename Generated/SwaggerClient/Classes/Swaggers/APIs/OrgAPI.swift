//
// OrgAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OrgAPI {
    /**
     Add a new API Key to an org
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addAPIKeyToOrg(completion: @escaping ((_ data: APIKey?,_ error: Error?) -> Void)) {
        addAPIKeyToOrgWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a new API Key to an org
     - POST /org/key
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "creator" : {
    "phone" : "phone",
    "name" : "name",
    "email" : "email"
  },
  "creationTime" : 0,
  "key" : "key",
  "orgId" : "orgId",
  "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
}}]

     - returns: RequestBuilder<APIKey> 
     */
    open class func addAPIKeyToOrgWithRequestBuilder() -> RequestBuilder<APIKey> {
        let path = "/org/key"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<APIKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add a new admin to this org
     
     - parameter contact: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addAdminToOrg(contact: Contact, completion: @escaping ((_ data: Contact?,_ error: Error?) -> Void)) {
        addAdminToOrgWithRequestBuilder(contact: contact).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a new admin to this org
     - POST /org/admin
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "phone" : "phone",
  "name" : "name",
  "email" : "email"
}}]
     
     - parameter contact: (body)  

     - returns: RequestBuilder<Contact> 
     */
    open class func addAdminToOrgWithRequestBuilder(contact: Contact) -> RequestBuilder<Contact> {
        let path = "/org/admin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: contact)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Contact>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a new organization. Must be an authenticated request with a valid id_token from a trusted IdP.
     
     - parameter idToken: (query)  
     - parameter stripeCustomerId: (query)  
     - parameter orgName: (query)  
     - parameter contact: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addOrganization(idToken: String, stripeCustomerId: String, orgName: String, contact: Contact, completion: @escaping ((_ data: Organization?,_ error: Error?) -> Void)) {
        addOrganizationWithRequestBuilder(idToken: idToken, stripeCustomerId: stripeCustomerId, orgName: orgName, contact: contact).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a new organization. Must be an authenticated request with a valid id_token from a trusted IdP.
     - POST /org
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "cryptoConfigId" : "cryptoConfigId",
  "name" : "name",
  "apiKeys" : [ {
    "creator" : {
      "phone" : "phone",
      "name" : "name",
      "email" : "email"
    },
    "creationTime" : 0,
    "key" : "key",
    "orgId" : "orgId",
    "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
  }, {
    "creator" : {
      "phone" : "phone",
      "name" : "name",
      "email" : "email"
    },
    "creationTime" : 0,
    "key" : "key",
    "orgId" : "orgId",
    "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
  } ],
  "id" : "id",
  "stripeCustomerId" : "stripeCustomerId",
  "clientIds" : [ "clientIds", "clientIds" ],
  "contacts" : [ {
    "phone" : "phone",
    "name" : "name",
    "email" : "email"
  }, {
    "phone" : "phone",
    "name" : "name",
    "email" : "email"
  } ]
}}]
     
     - parameter idToken: (query)  
     - parameter stripeCustomerId: (query)  
     - parameter orgName: (query)  
     - parameter contact: (body)  

     - returns: RequestBuilder<Organization> 
     */
    open class func addOrganizationWithRequestBuilder(idToken: String, stripeCustomerId: String, orgName: String, contact: Contact) -> RequestBuilder<Organization> {
        let path = "/org"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: contact)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id_token": idToken, 
            "stripeCustomerId": stripeCustomerId, 
            "orgName": orgName
        ])

        let requestBuilder: RequestBuilder<Organization>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove an existing API Key
     
     - parameter apikey: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAPIKeyFromOrg(apikey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAPIKeyFromOrgWithRequestBuilder(apikey: apikey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove an existing API Key
     - DELETE /org/key/{apikey}
     - API Key:
       - type: apiKey authorization 
       - name: header
     
     - parameter apikey: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAPIKeyFromOrgWithRequestBuilder(apikey: String) -> RequestBuilder<Void> {
        var path = "/org/key/{apikey}"
        let apikeyPreEscape = "\(apikey)"
        let apikeyPostEscape = apikeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed) ?? ""
        path = path.replacingOccurrences(of: "{apikey}", with: apikeyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove an existing admin from the org (You can not remove the last admin. It will faile with a Bad Request response.)
     
     - parameter email: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAdminFromOrg(email: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAdminFromOrgWithRequestBuilder(email: email).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove an existing admin from the org (You can not remove the last admin. It will faile with a Bad Request response.)
     - DELETE /org/admin/{email}
     - API Key:
       - type: apiKey authorization 
       - name: header
     
     - parameter email: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAdminFromOrgWithRequestBuilder(email: String) -> RequestBuilder<Void> {
        var path = "/org/admin/{email}"
        let emailPreEscape = "\(email)"
        let emailPostEscape = emailPreEscape.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed) ?? ""
        path = path.replacingOccurrences(of: "{email}", with: emailPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove an existing organization
     
     - parameter orgId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOrganization(orgId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteOrganizationWithRequestBuilder(orgId: orgId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove an existing organization
     - DELETE /org/{orgId}
     - API Key:
       - type: apiKey authorization 
       - name: header
     
     - parameter orgId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteOrganizationWithRequestBuilder(orgId: String) -> RequestBuilder<Void> {
        var path = "/org/{orgId}"
        let orgIdPreEscape = "\(orgId)"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an access key for the peacemakr shared cloud org (all cloud key derivers must use this)
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCloudOrganizationAPIKey(completion: @escaping ((_ data: APIKey?,_ error: Error?) -> Void)) {
        getCloudOrganizationAPIKeyWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an access key for the peacemakr shared cloud org (all cloud key derivers must use this)
     - GET /org/key/sharedCloud
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "creator" : {
    "phone" : "phone",
    "name" : "name",
    "email" : "email"
  },
  "creationTime" : 0,
  "key" : "key",
  "orgId" : "orgId",
  "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
}}]

     - returns: RequestBuilder<APIKey> 
     */
    open class func getCloudOrganizationAPIKeyWithRequestBuilder() -> RequestBuilder<APIKey> {
        let path = "/org/key/sharedCloud"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<APIKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an existing organization
     
     - parameter orgId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrganization(orgId: String, completion: @escaping ((_ data: Organization?,_ error: Error?) -> Void)) {
        getOrganizationWithRequestBuilder(orgId: orgId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an existing organization
     - GET /org/{orgId}
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "cryptoConfigId" : "cryptoConfigId",
  "name" : "name",
  "apiKeys" : [ {
    "creator" : {
      "phone" : "phone",
      "name" : "name",
      "email" : "email"
    },
    "creationTime" : 0,
    "key" : "key",
    "orgId" : "orgId",
    "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
  }, {
    "creator" : {
      "phone" : "phone",
      "name" : "name",
      "email" : "email"
    },
    "creationTime" : 0,
    "key" : "key",
    "orgId" : "orgId",
    "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
  } ],
  "id" : "id",
  "stripeCustomerId" : "stripeCustomerId",
  "clientIds" : [ "clientIds", "clientIds" ],
  "contacts" : [ {
    "phone" : "phone",
    "name" : "name",
    "email" : "email"
  }, {
    "phone" : "phone",
    "name" : "name",
    "email" : "email"
  } ]
}}]
     
     - parameter orgId: (path)  

     - returns: RequestBuilder<Organization> 
     */
    open class func getOrganizationWithRequestBuilder(orgId: String) -> RequestBuilder<Organization> {
        var path = "/org/{orgId}"
        let orgIdPreEscape = "\(orgId)"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed) ?? ""
        path = path.replacingOccurrences(of: "{orgId}", with: orgIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Organization>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an existing Organization
     
     - parameter apikey: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOrganizationFromAPIKey(apikey: String, completion: @escaping ((_ data: Organization?,_ error: Error?) -> Void)) {
        getOrganizationFromAPIKeyWithRequestBuilder(apikey: apikey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an existing Organization
     - GET /org/key/{apikey}
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "cryptoConfigId" : "cryptoConfigId",
  "name" : "name",
  "apiKeys" : [ {
    "creator" : {
      "phone" : "phone",
      "name" : "name",
      "email" : "email"
    },
    "creationTime" : 0,
    "key" : "key",
    "orgId" : "orgId",
    "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
  }, {
    "creator" : {
      "phone" : "phone",
      "name" : "name",
      "email" : "email"
    },
    "creationTime" : 0,
    "key" : "key",
    "orgId" : "orgId",
    "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
  } ],
  "id" : "id",
  "stripeCustomerId" : "stripeCustomerId",
  "clientIds" : [ "clientIds", "clientIds" ],
  "contacts" : [ {
    "phone" : "phone",
    "name" : "name",
    "email" : "email"
  }, {
    "phone" : "phone",
    "name" : "name",
    "email" : "email"
  } ]
}}]
     
     - parameter apikey: (path)  

     - returns: RequestBuilder<Organization> 
     */
    open class func getOrganizationFromAPIKeyWithRequestBuilder(apikey: String) -> RequestBuilder<Organization> {
        var path = "/org/key/{apikey}"
        let apikeyPreEscape = "\(apikey)"
        let apikeyPostEscape = apikeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed) ?? ""
        path = path.replacingOccurrences(of: "{apikey}", with: apikeyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Organization>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an ephemeral test org api key
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTestOrganizationAPIKey(completion: @escaping ((_ data: APIKey?,_ error: Error?) -> Void)) {
        getTestOrganizationAPIKeyWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an ephemeral test org api key
     - GET /org/key/test
     - examples: [{contentType=application/json, example={
  "creator" : {
    "phone" : "phone",
    "name" : "name",
    "email" : "email"
  },
  "creationTime" : 0,
  "key" : "key",
  "orgId" : "orgId",
  "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
}}]

     - returns: RequestBuilder<APIKey> 
     */
    open class func getTestOrganizationAPIKeyWithRequestBuilder() -> RequestBuilder<APIKey> {
        let path = "/org/key/test"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<APIKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update the stripe customer Id associated with this account
     
     - parameter stripeCustomerId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateStripeCustomerId(stripeCustomerId: String, completion: @escaping ((_ data: APIKey?,_ error: Error?) -> Void)) {
        updateStripeCustomerIdWithRequestBuilder(stripeCustomerId: stripeCustomerId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update the stripe customer Id associated with this account
     - POST /org/stripeId
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "creator" : {
    "phone" : "phone",
    "name" : "name",
    "email" : "email"
  },
  "creationTime" : 0,
  "key" : "key",
  "orgId" : "orgId",
  "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
}}]
     
     - parameter stripeCustomerId: (query)  

     - returns: RequestBuilder<APIKey> 
     */
    open class func updateStripeCustomerIdWithRequestBuilder(stripeCustomerId: String) -> RequestBuilder<APIKey> {
        let path = "/org/stripeId"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "stripeCustomerId": stripeCustomerId
        ])

        let requestBuilder: RequestBuilder<APIKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
