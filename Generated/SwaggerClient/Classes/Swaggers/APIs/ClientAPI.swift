//
// ClientAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ClientAPI {
    /**
     Register a new client
     
     - parameter client: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addClient(client: Client, completion: @escaping ((_ data: Client?,_ error: Error?) -> Void)) {
        addClientWithRequestBuilder(client: client).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Register a new client
     - POST /client
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "id" : "id",
  "sdk" : "sdk",
  "publicKey" : {
    "creationTime" : 0,
    "id" : "id",
    "keyType" : "rsa",
    "encoding" : "pem",
    "key" : "key"
  }
}}]
     
     - parameter client: (body)  

     - returns: RequestBuilder<Client> 
     */
    open class func addClientWithRequestBuilder(client: Client) -> RequestBuilder<Client> {
        let path = "/client"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: client)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Client>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove an existing organization
     
     - parameter clientId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteClient(clientId: String, completion: @escaping ((_ data: Client?,_ error: Error?) -> Void)) {
        deleteClientWithRequestBuilder(clientId: clientId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Remove an existing organization
     - DELETE /client/{clientId}
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "id" : "id",
  "sdk" : "sdk",
  "publicKey" : {
    "creationTime" : 0,
    "id" : "id",
    "keyType" : "rsa",
    "encoding" : "pem",
    "key" : "key"
  }
}}]
     
     - parameter clientId: (path)  

     - returns: RequestBuilder<Client> 
     */
    open class func deleteClientWithRequestBuilder(clientId: String) -> RequestBuilder<Client> {
        var path = "/client/{clientId}"
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Client>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an existing client
     
     - parameter clientId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getClient(clientId: String, completion: @escaping ((_ data: Client?,_ error: Error?) -> Void)) {
        getClientWithRequestBuilder(clientId: clientId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an existing client
     - GET /client/{clientId}
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "id" : "id",
  "sdk" : "sdk",
  "publicKey" : {
    "creationTime" : 0,
    "id" : "id",
    "keyType" : "rsa",
    "encoding" : "pem",
    "key" : "key"
  }
}}]
     
     - parameter clientId: (path)  

     - returns: RequestBuilder<Client> 
     */
    open class func getClientWithRequestBuilder(clientId: String) -> RequestBuilder<Client> {
        var path = "/client/{clientId}"
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Client>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Register a new public key for the client, replacing existing key
     
     - parameter clientId: (path)  
     - parameter newPublicKey: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateClientPublicKey(clientId: String, newPublicKey: PublicKey, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateClientPublicKeyWithRequestBuilder(clientId: clientId, newPublicKey: newPublicKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Register a new public key for the client, replacing existing key
     - POST /client/{clientId}/updatePublicKey
     - API Key:
       - type: apiKey authorization 
       - name: header
     
     - parameter clientId: (path)  
     - parameter newPublicKey: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func updateClientPublicKeyWithRequestBuilder(clientId: String, newPublicKey: PublicKey) -> RequestBuilder<Void> {
        var path = "/client/{clientId}/updatePublicKey"
        let clientIdPreEscape = "\(clientId)"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{clientId}", with: clientIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: newPublicKey)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
