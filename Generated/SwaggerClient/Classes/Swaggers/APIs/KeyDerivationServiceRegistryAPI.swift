//
// KeyDerivationServiceRegistryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class KeyDerivationServiceRegistryAPI {
    /**
     Register a new KeyDerivationServiceInstance
     
     - parameter keyDerivationInstance: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addKeyDerivationServiceInstance(keyDerivationInstance: KeyDerivationInstance? = nil, completion: @escaping ((_ data: KeyDerivationInstance?,_ error: Error?) -> Void)) {
        addKeyDerivationServiceInstanceWithRequestBuilder(keyDerivationInstance: keyDerivationInstance).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Register a new KeyDerivationServiceInstance
     - POST /crypto/deriver/instance
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "serviceIds" : [ "serviceIds", "serviceIds" ],
  "baseUrl" : "baseUrl",
  "active" : true,
  "id" : "id",
  "version" : "version"
}}]
     
     - parameter keyDerivationInstance: (body)  (optional)

     - returns: RequestBuilder<KeyDerivationInstance> 
     */
    open class func addKeyDerivationServiceInstanceWithRequestBuilder(keyDerivationInstance: KeyDerivationInstance? = nil) -> RequestBuilder<KeyDerivationInstance> {
        let path = "/crypto/deriver/instance"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: keyDerivationInstance)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<KeyDerivationInstance>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Activate or deactivate an existing KeyDerivationServiceInstance
     
     - parameter keyDerivationInstanceId: (path)  
     - parameter active: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteKeyDerivationServiceInstance(keyDerivationInstanceId: String, active: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteKeyDerivationServiceInstanceWithRequestBuilder(keyDerivationInstanceId: keyDerivationInstanceId, active: active).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Activate or deactivate an existing KeyDerivationServiceInstance
     - DELETE /crypto/deriver/instance/{keyDerivationInstanceId}
     - API Key:
       - type: apiKey authorization 
       - name: header
     
     - parameter keyDerivationInstanceId: (path)  
     - parameter active: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteKeyDerivationServiceInstanceWithRequestBuilder(keyDerivationInstanceId: String, active: String) -> RequestBuilder<Void> {
        var path = "/crypto/deriver/instance/{keyDerivationInstanceId}"
        let keyDerivationInstanceIdPreEscape = "\(keyDerivationInstanceId)"
        let keyDerivationInstanceIdPostEscape = keyDerivationInstanceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{keyDerivationInstanceId}", with: keyDerivationInstanceIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "active": active
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Heatbeat from the given key derivation service instance
     
     - parameter keyDerivationInstanceId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func heartbeatKeyDerivationServiceInstance(keyDerivationInstanceId: String, completion: @escaping ((_ data: HeatbeatResponse?,_ error: Error?) -> Void)) {
        heartbeatKeyDerivationServiceInstanceWithRequestBuilder(keyDerivationInstanceId: keyDerivationInstanceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Heatbeat from the given key derivation service instance
     - GET /crypto/deriver/instance/{keyDerivationInstanceId}/heartbeat
     - API Key:
       - type: apiKey authorization 
       - name: header
     - examples: [{contentType=application/json, example={
  "requests" : [ {
    "creationTime" : 0,
    "packagedCiphertextVersion" : 1,
    "deliveryPublicKeyIds" : [ "deliveryPublicKeyIds", "deliveryPublicKeyIds" ],
    "deriveSymmetricKeyIds" : [ "deriveSymmetricKeyIds", "deriveSymmetricKeyIds" ],
    "id" : "id",
    "keyDerivationServiceId" : "keyDerivationServiceId",
    "symmetricKeyLength" : 6
  }, {
    "creationTime" : 0,
    "packagedCiphertextVersion" : 1,
    "deliveryPublicKeyIds" : [ "deliveryPublicKeyIds", "deliveryPublicKeyIds" ],
    "deriveSymmetricKeyIds" : [ "deriveSymmetricKeyIds", "deriveSymmetricKeyIds" ],
    "id" : "id",
    "keyDerivationServiceId" : "keyDerivationServiceId",
    "symmetricKeyLength" : 6
  } ]
}}]
     
     - parameter keyDerivationInstanceId: (path)  

     - returns: RequestBuilder<HeatbeatResponse> 
     */
    open class func heartbeatKeyDerivationServiceInstanceWithRequestBuilder(keyDerivationInstanceId: String) -> RequestBuilder<HeatbeatResponse> {
        var path = "/crypto/deriver/instance/{keyDerivationInstanceId}/heartbeat"
        let keyDerivationInstanceIdPreEscape = "\(keyDerivationInstanceId)"
        let keyDerivationInstanceIdPostEscape = keyDerivationInstanceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{keyDerivationInstanceId}", with: keyDerivationInstanceIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<HeatbeatResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
