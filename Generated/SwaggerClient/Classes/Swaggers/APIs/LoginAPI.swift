//
// LoginAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class LoginAPI {
    /**
     After aquiring and OAuth2 openId id_token from IdP (like google login), present it here and proceed with the required flow.  If this is a new user, they'll have to create an org, else, they will just get their org details, and an APIKey associated with their org.
     
     - parameter idToken: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func login(idToken: String, completion: @escaping ((_ data: LoginResponse?,_ error: Error?) -> Void)) {
        loginWithRequestBuilder(idToken: idToken).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     After aquiring and OAuth2 openId id_token from IdP (like google login), present it here and proceed with the required flow.  If this is a new user, they'll have to create an org, else, they will just get their org details, and an APIKey associated with their org.
     - GET /login
     - examples: [{contentType=application/json, example={
  "messageOftheDay" : "messageOftheDay",
  "mustCreateOrg" : true,
  "Org" : {
    "cryptoConfigId" : "cryptoConfigId",
    "name" : "name",
    "apiKeys" : [ {
      "creator" : {
        "phone" : "phone",
        "name" : "name",
        "email" : "email"
      },
      "creationTime" : 0,
      "key" : "key",
      "orgId" : "orgId",
      "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
    }, {
      "creator" : {
        "phone" : "phone",
        "name" : "name",
        "email" : "email"
      },
      "creationTime" : 0,
      "key" : "key",
      "orgId" : "orgId",
      "authorizedUseDomains" : [ "authorizedUseDomains", "authorizedUseDomains" ]
    } ],
    "id" : "id",
    "stripeCustomerId" : "stripeCustomerId",
    "clientIds" : [ "clientIds", "clientIds" ],
    "contacts" : [ {
      "phone" : "phone",
      "name" : "name",
      "email" : "email"
    }, {
      "phone" : "phone",
      "name" : "name",
      "email" : "email"
    } ]
  }
}}]
     
     - parameter idToken: (query)  

     - returns: RequestBuilder<LoginResponse> 
     */
    open class func loginWithRequestBuilder(idToken: String) -> RequestBuilder<LoginResponse> {
        let path = "/login"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "id_token": idToken
        ])

        let requestBuilder: RequestBuilder<LoginResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Invite (bind) an existing user that is not already bound to an org, to your org
     
     - parameter email: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginInviteUser(email: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        loginInviteUserWithRequestBuilder(email: email).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Invite (bind) an existing user that is not already bound to an org, to your org
     - POST /login/inviteUser
     - API Key:
       - type: apiKey authorization 
       - name: header
     
     - parameter email: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func loginInviteUserWithRequestBuilder(email: String) -> RequestBuilder<Void> {
        let path = "/login/inviteUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "email": email
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Uninvite (remove) an existing user that is part of your org
     
     - parameter email: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginUninviteUser(email: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        loginUninviteUserWithRequestBuilder(email: email).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Uninvite (remove) an existing user that is part of your org
     - DELETE /login/inviteUser
     - API Key:
       - type: apiKey authorization 
       - name: header
     
     - parameter email: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func loginUninviteUserWithRequestBuilder(email: String) -> RequestBuilder<Void> {
        let path = "/login/inviteUser"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "email": email
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
