//
// SymmetricKeyUseDomain.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct SymmetricKeyUseDomain: Codable {

    public var _id: String
    /** the org id of the organization that owns these symmetric keys */
    public var ownerOrgId: String
    public var name: String?
    public var creationTime: Int
    /** number of seconds since key creation that the key will be available for encryption */
    public var symmetricKeyInceptionTTL: Int
    /** number of seconds since key creation that the key will be available for encryption */
    public var symmetricKeyEncryptionUseTTL: Int
    /** whether this use domain is available for encryption; if false, these keys should not be used for encrypting new messages */
    public var symmetricKeyEncryptionAllowed: Bool?
    /** number of seconds since key creation that the key will be available for decryption */
    public var symmetricKeyDecryptionUseTTL: Int
    /** whether this use domain is available for decryption; if false, these keys should not be used for decrypting messages */
    public var symmetricKeyDecryptionAllowed: Bool?
    /** number of seconds since key creation that the key will be available for retention purposes */
    public var symmetricKeyRetentionUseTTL: Int
    /** the number of bits of all symmetric keys in this use domain */
    public var symmetricKeyLength: Int
    /** the specific encryption alg to encrypt new plaintexts for application layer encryption operations */
    public var symmetricKeyEncryptionAlg: String
    /** after encrypting new plaintexts, package the ciphertext with this version of the packaged ciphertext */
    public var encryptingPackagedCiphertextVersion: Int
    /** the symmetric key derivation serivce id that can derive and wrap these keys */
    public var symmetricKeyDerivationServiceId: String
    /** these are the semmetric key id&#39;s that belong to this use domain - these keys never belong to any other use domain */
    public var encryptionKeyIds: [String]
    /** if all registered kds service become unreachable, then incoming requests for new and existing keys may fallback to the cloud provided KDS */
    public var endableKDSFallbackToCloud: Bool
    /** if required, all clients must receive these keys in a signed symmetric key delivery from the key deriver */
    public var requireSignedKeyDelivery: Bool
    /** The digest algorithm to use for signing messages in this use domain */
    public var digestAlgorithm: String?

    public init(_id: String, ownerOrgId: String, name: String?, creationTime: Int, symmetricKeyInceptionTTL: Int, symmetricKeyEncryptionUseTTL: Int, symmetricKeyEncryptionAllowed: Bool?, symmetricKeyDecryptionUseTTL: Int, symmetricKeyDecryptionAllowed: Bool?, symmetricKeyRetentionUseTTL: Int, symmetricKeyLength: Int, symmetricKeyEncryptionAlg: String, encryptingPackagedCiphertextVersion: Int, symmetricKeyDerivationServiceId: String, encryptionKeyIds: [String], endableKDSFallbackToCloud: Bool, requireSignedKeyDelivery: Bool, digestAlgorithm: String?) {
        self._id = _id
        self.ownerOrgId = ownerOrgId
        self.name = name
        self.creationTime = creationTime
        self.symmetricKeyInceptionTTL = symmetricKeyInceptionTTL
        self.symmetricKeyEncryptionUseTTL = symmetricKeyEncryptionUseTTL
        self.symmetricKeyEncryptionAllowed = symmetricKeyEncryptionAllowed
        self.symmetricKeyDecryptionUseTTL = symmetricKeyDecryptionUseTTL
        self.symmetricKeyDecryptionAllowed = symmetricKeyDecryptionAllowed
        self.symmetricKeyRetentionUseTTL = symmetricKeyRetentionUseTTL
        self.symmetricKeyLength = symmetricKeyLength
        self.symmetricKeyEncryptionAlg = symmetricKeyEncryptionAlg
        self.encryptingPackagedCiphertextVersion = encryptingPackagedCiphertextVersion
        self.symmetricKeyDerivationServiceId = symmetricKeyDerivationServiceId
        self.encryptionKeyIds = encryptionKeyIds
        self.endableKDSFallbackToCloud = endableKDSFallbackToCloud
        self.requireSignedKeyDelivery = requireSignedKeyDelivery
        self.digestAlgorithm = digestAlgorithm
    }

    public enum CodingKeys: String, CodingKey { 
        case _id = "id"
        case ownerOrgId
        case name
        case creationTime
        case symmetricKeyInceptionTTL
        case symmetricKeyEncryptionUseTTL
        case symmetricKeyEncryptionAllowed
        case symmetricKeyDecryptionUseTTL
        case symmetricKeyDecryptionAllowed
        case symmetricKeyRetentionUseTTL
        case symmetricKeyLength
        case symmetricKeyEncryptionAlg
        case encryptingPackagedCiphertextVersion
        case symmetricKeyDerivationServiceId
        case encryptionKeyIds
        case endableKDSFallbackToCloud
        case requireSignedKeyDelivery
        case digestAlgorithm
    }


}

