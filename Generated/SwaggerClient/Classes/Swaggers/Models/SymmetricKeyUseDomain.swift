//
// SymmetricKeyUseDomain.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct SymmetricKeyUseDomain: Codable {

    public var _id: String
    /** the org id of the organization that owns these symmetric keys */
    public var ownerOrgId: String
    public var name: String?
    public var creationTime: Int
    /** number of seconds since key creation that the key will be available for encryption */
    public var symmetricKeyInceptionTTL: Int
    /** number of seconds since key creation that the key will be available for encryption */
    public var symmetricKeyEncryptionUseTTL: Int
    /** number of seconds since key creation that the key will be available for decryption */
    public var symmetricKeyDecryptionUseTTL: Int
    /** number of seconds since key creation that the key will be available for retention purposes */
    public var symmetricKeyRetentionUseTTL: Int
    /** the number of bits of all symmetric keys in this use domain */
    public var symmetricKeyLength: Int
    /** the specific encryption alg to encrypt new plaintexts for application layer encryption operations */
    public var symmetricKeyEncryptionAlg: String
    /** after encrypting new plaintexts, package the ciphertext with this version of the packaged ciphertext */
    public var encryptingPackagedCiphertextVersion: Int
    /** the symmetric key derivation serivce id that can derive and wrap these keys */
    public var symmetricKeyDerivationServiceId: String
    /** these are the semmetric key id&#39;s that belong to this use domain - these keys never belong to any other use domain */
    public var encryptionKeyIds: [String]
    /** if all registered kds service become unreachable, then incoming requests for new and existing keys may fallback to the cloud provided KDS */
    public var endableKDSFallbackToCloud: Bool

    public init(_id: String, ownerOrgId: String, name: String?, creationTime: Int, symmetricKeyInceptionTTL: Int, symmetricKeyEncryptionUseTTL: Int, symmetricKeyDecryptionUseTTL: Int, symmetricKeyRetentionUseTTL: Int, symmetricKeyLength: Int, symmetricKeyEncryptionAlg: String, encryptingPackagedCiphertextVersion: Int, symmetricKeyDerivationServiceId: String, encryptionKeyIds: [String], endableKDSFallbackToCloud: Bool) {
        self._id = _id
        self.ownerOrgId = ownerOrgId
        self.name = name
        self.creationTime = creationTime
        self.symmetricKeyInceptionTTL = symmetricKeyInceptionTTL
        self.symmetricKeyEncryptionUseTTL = symmetricKeyEncryptionUseTTL
        self.symmetricKeyDecryptionUseTTL = symmetricKeyDecryptionUseTTL
        self.symmetricKeyRetentionUseTTL = symmetricKeyRetentionUseTTL
        self.symmetricKeyLength = symmetricKeyLength
        self.symmetricKeyEncryptionAlg = symmetricKeyEncryptionAlg
        self.encryptingPackagedCiphertextVersion = encryptingPackagedCiphertextVersion
        self.symmetricKeyDerivationServiceId = symmetricKeyDerivationServiceId
        self.encryptionKeyIds = encryptionKeyIds
        self.endableKDSFallbackToCloud = endableKDSFallbackToCloud
    }

    public enum CodingKeys: String, CodingKey { 
        case _id = "id"
        case ownerOrgId
        case name
        case creationTime
        case symmetricKeyInceptionTTL
        case symmetricKeyEncryptionUseTTL
        case symmetricKeyDecryptionUseTTL
        case symmetricKeyRetentionUseTTL
        case symmetricKeyLength
        case symmetricKeyEncryptionAlg
        case encryptingPackagedCiphertextVersion
        case symmetricKeyDerivationServiceId
        case encryptionKeyIds
        case endableKDSFallbackToCloud
    }


}

